// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsHealthKitWorkout(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsHealthKitWorkout(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsHealthKitWorkout(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashHealthKitWorkout(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashHealthKitWorkout(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashHealthKitWorkout(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct BPMDataPoint: Hashable {
  var ts: String? = nil
  var bpm: Double? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BPMDataPoint? {
    let ts: String? = nilOrValue(pigeonVar_list[0])
    let bpm: Double? = nilOrValue(pigeonVar_list[1])

    return BPMDataPoint(
      ts: ts,
      bpm: bpm
    )
  }
  func toList() -> [Any?] {
    return [
      ts,
      bpm,
    ]
  }
  static func == (lhs: BPMDataPoint, rhs: BPMDataPoint) -> Bool {
    return deepEqualsHealthKitWorkout(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashHealthKitWorkout(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SpeedDataPoint: Hashable {
  var ts: String? = nil
  var kmh: Double? = nil
  var paceMinPerKm: Double? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SpeedDataPoint? {
    let ts: String? = nilOrValue(pigeonVar_list[0])
    let kmh: Double? = nilOrValue(pigeonVar_list[1])
    let paceMinPerKm: Double? = nilOrValue(pigeonVar_list[2])

    return SpeedDataPoint(
      ts: ts,
      kmh: kmh,
      paceMinPerKm: paceMinPerKm
    )
  }
  func toList() -> [Any?] {
    return [
      ts,
      kmh,
      paceMinPerKm,
    ]
  }
  static func == (lhs: SpeedDataPoint, rhs: SpeedDataPoint) -> Bool {
    return deepEqualsHealthKitWorkout(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashHealthKitWorkout(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HKWorkoutData: Hashable {
  var uuid: String? = nil
  var start: String? = nil
  var end: String? = nil
  var distance: Double? = nil
  var avgSpeed: Double? = nil
  var avgBPM: Double? = nil
  var maxBPM: Double? = nil
  var bpmDataPoints: [BPMDataPoint?]? = nil
  var speedDataPoints: [SpeedDataPoint?]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> HKWorkoutData? {
    let uuid: String? = nilOrValue(pigeonVar_list[0])
    let start: String? = nilOrValue(pigeonVar_list[1])
    let end: String? = nilOrValue(pigeonVar_list[2])
    let distance: Double? = nilOrValue(pigeonVar_list[3])
    let avgSpeed: Double? = nilOrValue(pigeonVar_list[4])
    let avgBPM: Double? = nilOrValue(pigeonVar_list[5])
    let maxBPM: Double? = nilOrValue(pigeonVar_list[6])
    let bpmDataPoints: [BPMDataPoint?]? = nilOrValue(pigeonVar_list[7])
    let speedDataPoints: [SpeedDataPoint?]? = nilOrValue(pigeonVar_list[8])

    return HKWorkoutData(
      uuid: uuid,
      start: start,
      end: end,
      distance: distance,
      avgSpeed: avgSpeed,
      avgBPM: avgBPM,
      maxBPM: maxBPM,
      bpmDataPoints: bpmDataPoints,
      speedDataPoints: speedDataPoints
    )
  }
  func toList() -> [Any?] {
    return [
      uuid,
      start,
      end,
      distance,
      avgSpeed,
      avgBPM,
      maxBPM,
      bpmDataPoints,
      speedDataPoints,
    ]
  }
  static func == (lhs: HKWorkoutData, rhs: HKWorkoutData) -> Bool {
    return deepEqualsHealthKitWorkout(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashHealthKitWorkout(value: toList(), hasher: &hasher)
  }
}

private class HealthKitWorkoutPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return BPMDataPoint.fromList(self.readValue() as! [Any?])
    case 130:
      return SpeedDataPoint.fromList(self.readValue() as! [Any?])
    case 131:
      return HKWorkoutData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class HealthKitWorkoutPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BPMDataPoint {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? SpeedDataPoint {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? HKWorkoutData {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HealthKitWorkoutPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HealthKitWorkoutPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HealthKitWorkoutPigeonCodecWriter(data: data)
  }
}

class HealthKitWorkoutPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = HealthKitWorkoutPigeonCodec(readerWriter: HealthKitWorkoutPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HealthKitWorkoutApi {
  func getWorkouts() throws -> [HKWorkoutData?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HealthKitWorkoutApiSetup {
  static var codec: FlutterStandardMessageCodec { HealthKitWorkoutPigeonCodec.shared }
  /// Sets up an instance of `HealthKitWorkoutApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HealthKitWorkoutApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getWorkoutsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ferum.HealthKitWorkoutApi.getWorkouts\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getWorkoutsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getWorkouts()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getWorkoutsChannel.setMessageHandler(nil)
    }
  }
}
